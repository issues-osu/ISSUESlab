---
title: "Extensions"
author: "ISSUES"
format: html
editor: visual
---

## Quarto

# LCA with Continuous Indicators Using `tidyLPA`

```{r}
continuous_data <- tibble(
  dep1 = rnorm(500, mean = 0, sd = 1),
  dep2 = rnorm(500, mean = 0, sd = 1),
  dep3 = rnorm(500, mean = 0, sd = 1)
)

library(tidyLPA)
results <- continuous_data %>%
  estimate_profiles(n_profiles = 2:4, models = 1)

compare_solutions(results)
```

`tidyLPA` automatically reports BIC, AIC, entropy, and class sizes. It is useful for identifying continuous latent profiles.

# Multigroup LCA: Manual Split

```{r}
categorical_data$group <- sample(c("male", "female"), size = 500, replace = TRUE)

model_male <- poLCA(f, data = filter(categorical_data, group == "male"), nclass = 2)
model_female <- poLCA(f, data = filter(categorical_data, group == "female"), nclass = 2)
```

Compare class structures, conditional probabilities, and class sizes across groups.

# Multilevel LCA Using `randomLCA`

```{r}
# Recreate simulated categorical data
set.seed(123)
categorical_data <- tibble(
  symptom1 = sample(1:2, 500, replace = TRUE),
  symptom2 = sample(1:3, 500, replace = TRUE),
  symptom3 = sample(1:2, 500, replace = TRUE),
  symptom4 = sample(1:3, 500, replace = TRUE)
)

# Recode each item into binary format (you decide the rule)
binary_data <- categorical_data %>%
  mutate(
    symptom1 = ifelse(symptom1 == 2, 1, 0),
    symptom2 = ifelse(symptom2 > 1, 1, 0),
    symptom3 = ifelse(symptom3 == 2, 1, 0),
    symptom4 = ifelse(symptom4 == 3, 1, 0)
  )

# Simulate grouping structure for multilevel model
binary_data <- binary_data %>%
  mutate(id = rep(1:100, each = 5))

# Convert to matrix format required by `randomLCA`
lca_matrix <- as.matrix(binary_data %>% select(symptom1:symptom4))

# Fit multilevel latent class model
library(randomLCA)
model_random <- randomLCA(lca_matrix, nclass = 2, random = TRUE)
summary(model_random)

```

This allows class probabilities to vary across higher-level units (e.g., schools, families).

# Exporting Results

```{r}
class_assignments <- tibble(ID = 1:nrow(categorical_data),
                            class = model_3class$predclass)
write.csv(class_assignments, "class_memberships.csv", row.names = FALSE)
```
